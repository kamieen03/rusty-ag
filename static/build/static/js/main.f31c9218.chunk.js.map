{"version":3,"sources":["common/Header.js","searching/LinkList.js","constants.js","searching/SearchResults.js","searching/Searcher.js","common/CubeSpinner.js","error/NoContentMessage.js","error/NoPhotoAvailable.js","entity/Entity.js","entity/ArtistEntity.js","grid/ArtworkCell.js","common/BlackAndWhiteLink.js","grid/GridView.js","grid/Grid.js","helper.js","grid/ArtworksGrid.js","entity/ArtworkEntity.js","popular/Popular.js","grid/ArtMovementCell.js","grid/ArtMovementGrid.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","to","IconButton","onClick","onStartSearching","LinkList","undefined","data","slice","map","item","i","key","idFieldName","url","onLinkClick","valueFieldName","ROOT_URL","GET_SEARCH_URL","GET_ARTIST_URL","GET_ARTWORK_URL","GET_ART_MOVEMENT_URL","GET_ARTIST_ARTWORKS_URL","artistId","GET_POPULAR_ARTWORKS","SearchResults","state","results","prevProps","this","searchPhrase","fetchSearchResults","then","setState","phrase","response","fetch","json","artists","artworks","styles","Component","Searcher","handleSearchPhraseChange","bind","event","target","value","onStopSearching","type","placeholder","onChange","React","CubeSpinner","NoContentMessage","NoPhotoAvailable","Entity","isLoaded","hasError","hasErrorImage","updateArtist","id","onEntityUpdate","receivedData","img","Image","onload","onEntityLoad","onerror","src","imgField","fields","filter","field","property","caption","createDescriptionItemValue","Array","isArray","convertArrayItem","itemUrlProperty","itemIdProperty","title","createDescription","ArtistEntity","isEntityLoaded","handleArtistLoad","handleArtistUpdate","match","params","ArtworkCell","backgroundImageStyle","backgroundImage","image","backgroundSize","height","contentId","style","completitionYear","BlackAndWhiteLink","children","GridView","cells","hasMore","cellsData","length","pageSize","initialLoad","handleLoadMore","page","nextCellsNumber","Cell","cellComponent","pageStart","loadMore","useWindow","cellData","cloneElement","Grid","items","fetchItems","entityId","split","word","toUpperCase","substr","join","titleComponent","idToName","ArtworksGrid","useParams","fontWeight","ArtworkEntity","handleArtworkLoad","handleArtworkUpdate","artworkId","Popular","auto_spin","paintings_iter","paintings","fetchPopular","setInterval","scroll","result","n","k","ArtMovementCell","name","artist_name","toLowerCase","replace","year","ArtMovementGrid","artMovementId","App","isSearching","handleStartSearching","handleStopSearching","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f31c9218.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\nimport { MdSearch } from 'react-icons/md';\nimport { IconButton } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nexport default function Header(props) {\n  return (\n    <div className=\"header\">\n      <div className=\"header-logo\">\n        <Link to=\"/\">\n          Artsee\n        </Link>\n      </div>\n      <IconButton onClick={() => { props.onStartSearching() }}>\n        <MdSearch className=\"header-search\" />\n      </IconButton>\n    </div>\n  );\n}\n","import React from 'react'\nimport './LinkList.css'\nimport {Link} from \"react-router-dom\";\n\nexport default function LinkList(props) {\n    const max_items = 10;\n\n    function generateLinks() {\n        return props.data.slice(0, max_items).map((item, i) => \n            <li key={item[props.idFieldName]} className=\"LinkList-item\">\n                <Link to={props.url + item[props.idFieldName]} onClick={() => props.onLinkClick()}>\n                    {item[props.valueFieldName]}\n                </Link>\n            </li>\n        )\n    }\n\n    return (\n        <ul> {props.data !== undefined\n            ? generateLinks()\n            : null}\n        </ul>\n    )\n}\n","export const ROOT_URL = 'https://rustyag.herokuapp.com/api';\n//export const ROOT_URL = 'http://localhost:8000/api';\nexport const GET_SEARCH_URL = `${ROOT_URL}/search/`;\nexport const GET_ARTIST_URL = `${ROOT_URL}/artist/`;\nexport const GET_ARTWORK_URL = `${ROOT_URL}/paintings/`;\nexport const GET_ART_MOVEMENT_URL = `${ROOT_URL}/art_movement/`;\nexport const GET_ARTIST_ARTWORKS_URL = (artistId) => `${ROOT_URL}/artist/${artistId}/paintings/`;\nexport const GET_POPULAR_ARTWORKS = `${ROOT_URL}/popular/`;\n\nexport const ARTIST_URL = '/artist/';\nexport const ARTWORK_URL = '/paintings/';\nexport const ART_MOVEMENT_URL = '/art_movement/';\nexport const ARTIST_ARTWORKS_URL = (artistId) => `/artist/${artistId}/paintings/`;\n\nexport const GRID_PAGE_SIZE = 20;\n","import React, { Component } from 'react'\nimport './SearchResults.css'\nimport LinkList from './LinkList.js'\nimport {GET_SEARCH_URL, ARTIST_URL, ARTWORK_URL, ART_MOVEMENT_URL } from './../constants'\n\n\nexport default class SearchResults extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            results: {}\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.searchPhrase !== prevProps.searchPhrase) {\n            if (this.props.searchPhrase === \"\") return;\n            this.fetchSearchResults(this.props.searchPhrase)\n                .then(data => {\n                    if (data != null) this.setState({ results: data })\n                });\n        }\n    }\n\n    async fetchSearchResults(phrase) {\n        const response = fetch(`${GET_SEARCH_URL}${phrase}`)\n        if (phrase === this.props.searchPhrase)\n            return (await response).json()\n        return null\n    }\n\n    render() {\n        if (this.props.searchPhrase === \"\") {\n            return null;\n        }\n\n        return (\n            <div className=\"SearchResults\">\n                <div className=\"SearchResults-list\">\n                    <h2>Artists</h2>\n                    <LinkList onLinkClick={this.props.onLinkClick} data={this.state.results.artists} idFieldName=\"url\" valueFieldName=\"name\" url={ARTIST_URL} />\n                </div>\n                <div className=\"SearchResults-list\">\n                    <h2>Paintings</h2>\n                    <LinkList onLinkClick={this.props.onLinkClick} data={this.state.results.artworks} idFieldName=\"id\" valueFieldName=\"name\" url={ARTWORK_URL} />\n                </div>\n                <div className=\"SearchResults-list\">\n                    <h2>Styles</h2>\n                    <LinkList onLinkClick={this.props.onLinkClick} data={this.state.results.styles} idFieldName=\"url\" valueFieldName=\"name\" url={ART_MOVEMENT_URL} />\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './Searcher.css'\nimport SearchResults from './SearchResults'\nimport { MdClose } from 'react-icons/md';\nimport { IconButton } from '@material-ui/core';\n\nexport default class Searcher extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tphrase: \"\",\n\t\t};\n\n\t\tthis.handleSearchPhraseChange = this.handleSearchPhraseChange.bind(this);\n\t}\n\n\n\thandleSearchPhraseChange(event) {\n\t\tthis.setState({phrase: event.target.value});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Searcher\">\n                <div className=\"SearcherInsides\">\n                    <IconButton onClick={this.props.onStopSearching} className=\"Searcher-close\">\n                        <MdClose className=\"Searcher-close-icon\"/>\n                    </IconButton>\n                    <input className=\"Searcher-searchbar\" type=\"search\" placeholder=\"Search\" onChange={this.handleSearchPhraseChange}/>\n                    <SearchResults searchPhrase={this.state.phrase} onLinkClick={this.props.onStopSearching}/>\n                </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react'\nimport './CubeSpinner.css'\n\nexport default function CubeSpinner() {\n    return (\n        <div className=\"CubeSpinner\">\n            <div className=\"CubeSpinner-cube1\"></div>\n            <div className=\"CubeSpinner-cube2\"></div>\n        </div>\n    )\n}\n","import React from 'react'\nimport './NoContentMessage.css'\nimport { MdSentimentDissatisfied } from 'react-icons/md';\n\nexport default function NoContentMessage() {\n    return (\n        <div className=\"NoContentMessage\">\n            <div className=\"NoContentMessage-dialog\">\n                Sorry, content not found\n            </div>\n            <MdSentimentDissatisfied className=\"NoContentMessage-icon\"/>\n        </div>\n    )\n}\n","import React from 'react'\nimport './NoPhotoAvailable.css'\nimport { MdBrokenImage } from 'react-icons/md';\n\nexport default function NoPhotoAvailable() {\n    return (\n        <div className=\"NoPhotoAvailable\">\n            <MdBrokenImage className=\"NoPhotoAvailable-icon\"/>\n            <div className=\"NoPhotoAvailable-dialog\">\n                No image available\n            </div>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport CubeSpinner from './../common/CubeSpinner.js'\nimport './Entity.css'\nimport { Link } from 'react-router-dom';\nimport NoContentMessage from './../error/NoContentMessage'\nimport NoPhotoAvailable from './../error/NoPhotoAvailable'\n\nexport default class Entity extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            hasError: false,\n            hasErrorImage: false,\n            data: null,\n        };\n    }\n\n\n    componentDidMount() {\n        this.updateArtist();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.id !== prevProps.id) {\n            this.props.onEntityUpdate();\n            this.setState({\n                isLoaded: false,\n                data: null,\n            });\n\n            this.updateArtist();\n        }\n    }\n\n\n    async updateArtist() {\n        try {\n            const response = await fetch(`${this.props.url}${this.props.id}`);\n            const receivedData = await response.json();\n            this.setState({\n                data: receivedData,\n                hasError: false\n            });\n\n            const img = new Image();\n\n            img.onload = () => {\n                this.setState({\n                    isLoaded: true,\n                    hasErrorImage: false,\n                });\n                this.props.onEntityLoad();\n            };\n\n            img.onerror = () => {\n                this.setState({\n                    isLoaded: true,\n                    hasErrorImage: true,\n                });\n                this.props.onEntityLoad();\n            }\n\n            img.src = receivedData[this.props.imgField];\n        } catch (e) {\n            this.setState({\n                hasError: true\n            });\n        }\n    }\n    createDescription() {\n        return this.props.fields\n            .filter(field => this.state.data[field.property] != null)\n            .map(field =>\n                <div className=\"Entity-description-item\" key={field.caption}>\n                    <div className=\"Entity-description-item-property\">\n                        {field.caption + \":\"}\n                    </div>\n                    <div className=\"Entity-description-item-value\">\n                        {this.createDescriptionItemValue(field)}\n                    </div>\n                </div>\n            );\n    }\n\n    createDescriptionItemValue(field) {\n        const value = this.state.data[field.property];\n\n        if (Array.isArray(value)) {\n            return (\n                <ul>\n                    {value.map((item, i) =>\n                        <li key={i}>\n                            {this.convertArrayItem(field, item)}\n                        </li>)}\n                </ul>\n            )\n        }\n\n        return value;\n    }\n\n    convertArrayItem(field, item) {\n        if (typeof item === 'object') {\n            const link =\n                <Link to={\"/\" + item[field.itemUrlProperty]}>\n                    {item[field.itemIdProperty]}\n                </Link>;\n            return link;\n        }\n\n        return item\n    }\n\n    render() {\n        if (this.state.isLoaded && this.state.data != null && !this.state.hasError) {\n            const title = this.state.data[this.props.title];\n\n            return (\n                <div className=\"Entity\">\n                    <div className=\"Entity-description\">\n                        <h1 className=\"Entity-description-title\">\n                            {title\n                                ? title\n                                : \"No title\"\n                            }\n                        </h1>\n                        {this.createDescription()}\n                    </div>\n                    <div className=\"Entity-presentation\">\n                        {!this.state.hasErrorImage\n                            ? <img className=\"Entity-presentation-image\" src={this.state.data[this.props.imgField]} />\n                            : <NoPhotoAvailable />\n                        }\n                    </div>\n\n                </div>\n            )\n        } else if (this.state.hasError) {\n            return (\n                <div className=\"Entity-nocontent\">\n                    <NoContentMessage />\n                </div>\n            )\n        }\n        else {\n            return (\n                <div>\n                    <CubeSpinner />\n                </div>\n            )\n        }\n    }\n}\n","import React, { Component } from 'react'\nimport Entity from './Entity.js'\nimport { GET_ARTIST_URL } from './../constants'\nimport { Link } from 'react-router-dom'\nimport './ArtistEntity.css'\n\n\nexport default class ArtistEntity extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { isEntityLoaded: false }\n        this.handleArtistLoad = this.handleArtistLoad.bind(this);\n        this.handleArtistUpdate = this.handleArtistUpdate.bind(this);\n    }\n\n    handleArtistLoad() {\n        this.setState({ isEntityLoaded: true })\n    }\n\n    handleArtistUpdate() {\n        this.setState({ isEntityLoaded: false })\n    }\n\n    render() {\n        const { artistId } = this.props.match.params\n        const name = \"name\";\n        const imgField= \"image_url\";\n\n        const fields = [\n            { caption: \"Born\", property: \"birth\" },\n            { caption: \"Died\", property: \"death\" },\n            { caption: \"Nationality\", property: \"nationality\" },\n            { caption: \"Painting school\", property: \"painting_school\" },\n            { caption: \"Art movement\", property: \"art_movement\", itemIdProperty: \"name\", itemUrlProperty: \"url\" },\n            { caption: \"Influenced by\", property: \"influenced_by\", itemIdProperty: \"name\", itemUrlProperty: \"url\" },\n        ]\n\n        return (\n            <div className=\"Artist\">\n                <Entity id={artistId} \n                    url={GET_ARTIST_URL} \n                    title={name} \n                    fields={fields} \n                    imgField={imgField} \n                    onEntityLoad={this.handleArtistLoad} \n                    onEntityUpdate={this.handleArtistUpdate} \n                    className=\"Artist-entity\"\n                />\n                {this.state.isEntityLoaded\n                    ? <Link className=\"Artist-artworks\" to={`/artist/${artistId}/paintings/`}>See artworks</Link>\n                    : null }\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport './ArtworkCell.css'\nimport { Link } from 'react-router-dom'\nimport { ARTWORK_URL } from '../constants'\n\nexport default function ArtworkCell(props) {\n    const backgroundImageStyle = {\n        backgroundImage: `url(${props.data.image})`,\n        backgroundSize: 'cover',\n        height: `100%`\n    }\n\n    return (\n        <div className=\"ArtworkCell\">\n            <div className=\"ArtworkCell-picture\">\n                <Link to={ARTWORK_URL + props.data.contentId}>\n                    <div style={backgroundImageStyle}></div>\n                </Link>\n            </div>\n\n            <div className=\"ArtworkCell-description\">\n                <div className=\"ArtworkCell-description-title\">\n                    {props.data.title}\n                </div>\n                <div className=\"ArtworkCell-description-year\">\n                    {props.data.completitionYear}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './BlackAndWhiteLink.css'\n\nexport default function BlackAndWhiteLink(props) {\n    return (\n        <Link to={props.to} className=\"BlackAndWhiteLink\">\n            {props.children}\n        </Link>\n    )\n}\n","import React, { Component } from 'react'\nimport InfiniteScroll from 'react-infinite-scroller';\nimport './GridView.css'\n\nexport default class GridView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cells: [],\n            hasMore: this.props.cellsData.length > this.props.pageSize,\n            initialLoad: true\n        }\n\n        this.handleLoadMore = this.handleLoadMore.bind(this);\n    }\n\n    handleLoadMore(page) {\n        const nextCellsNumber = this.props.pageSize * page;\n\n        if (this.state.initialLoad === true) {\n            this.setState({ initialLoad: false });\n        }\n\n        if (this.props.cellsData.length > nextCellsNumber) {\n            this.setState({ cells: this.props.cellsData.slice(0, nextCellsNumber) });\n        } else {\n            this.setState({ cells: this.props.cellsData.slice(0, this.props.cellsData.length) });\n        }\n    }\n\n    render() {\n        const Cell = this.props.cellComponent;\n\n        return (\n            <InfiniteScroll\n                pageStart={0}\n                loadMore={this.handleLoadMore}\n                hasMore={this.state.hasMore}\n                initialLoad={this.state.initialLoad}\n                useWindow={true}\n                className=\"GridView\"\n            >\n                {this.state.cells.map((cellData, i) =>\n                    React.cloneElement(Cell, {\n                        key: i,\n                        data: cellData\n                    })\n                )}\n            </InfiniteScroll>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Grid.css'\nimport { GRID_PAGE_SIZE } from './../constants'\nimport GridView from './GridView'\nimport CubeSpinner from './../common/CubeSpinner'\n\nexport default class Grid extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            items: []\n        }\n    }\n\n    async componentDidMount() {\n        const items = await this.fetchItems();\n        this.setState({\n            isLoaded: true,\n            items: items\n        })\n    }\n\n    async fetchItems() {\n        const response = await fetch(`${this.props.url}`);\n        const data = await response.json()\n        return data\n    }\n\n    decodeIdToName() {\n        return this.entityId\n            .split(\"-\")\n            .map(word => word[0].toUpperCase() + word.substr(1))\n            .join(\" \");\n    }\n\n    render() {\n        return (\n            <div className=\"Grid\">\n                <h2 className=\"Grid-title\">\n                    {this.props.titleComponent}\n                </h2>\n\n                {this.state.isLoaded\n                    ? <GridView\n                        cellsData={this.state.items}\n                        cellComponent={this.props.cellComponent}\n                        pageSize={GRID_PAGE_SIZE}\n                    />\n                    : <CubeSpinner />}\n            </div>\n        )\n    }\n}\n","export function idToName(id) {\n    return id\n        .split(\"-\")\n        .map(word => word[0].toUpperCase() + word.substr(1))\n        .join(\" \");\n}\n\nexport function nameToId(name) {\n    return name\n        .toLowerCase()\n        .replace(/\\s/g, \"-\");\n}\n","import React from 'react'\nimport './ArtworksGrid.css'\nimport '../common/CubeSpinner'\nimport { GET_ARTIST_ARTWORKS_URL, ARTIST_URL } from './../constants'\nimport ArtworkCell from './ArtworkCell.js'\nimport { useParams } from 'react-router-dom'\nimport BlackAndWhiteLink from '../common/BlackAndWhiteLink.js'\nimport Grid from './Grid'\nimport { idToName } from './../helper.js'\n\nexport default function ArtworksGrid() {\n    const { artistId } = useParams();\n    const title =\n        <div>\n            <BlackAndWhiteLink to={ARTIST_URL + artistId}>\n                {idToName(artistId)}\n            </BlackAndWhiteLink> \n            <span style={{ fontWeight: 'normal' }}> paintings</span>\n        </div>;\n\n    return (\n        <Grid\n            url={GET_ARTIST_ARTWORKS_URL(artistId)}\n            titleComponent={title}\n            cellComponent={<ArtworkCell />}\n        />\n    )\n}\n","import React, { Component } from 'react'\nimport Entity from './Entity.js'\nimport { GET_ARTWORK_URL } from './../constants'\nimport './ArtworkEntity.css'\n\n\nexport default class ArtworkEntity extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { isEntityLoaded: false }\n        this.handleArtworkLoad = this.handleArtworkLoad.bind(this);\n        this.handleArtworkUpdate = this.handleArtworkUpdate.bind(this);\n    }\n\n    handleArtworkLoad() {\n        this.setState({ isEntityLoaded: true })\n    }\n\n    handleArtworkUpdate() {\n        this.setState({ isEntityLoaded: false })\n    }\n\n    render() {\n        let artworkId;\n        if ('match' in this.props) {\n            artworkId = this.props.match.params.artworkId\n        } else {\n            artworkId = this.props.artworkId\n        }\n\n        const title = \"title\";\n        \n        const fields = [\n            { caption: \"Artist\", property: \"artist_name\" },\n            { caption: \"Year\", property: \"completition_year\" },\n            { caption: \"Location\", property: \"location\" },\n            { caption: \"Gallery\", property: \"gallery\" },\n            { caption: \"Media\", property: \"media\" },\n            { caption: \"Width\", property: \"size_x\" },\n            { caption: \"Height\", property: \"size_y\" },\n        ]\n        \n        const imgField = \"image\";\n\n        return (\n            <div className=\"Artwork\">\n                <Entity id={artworkId} url={GET_ARTWORK_URL} title={title} fields={fields} imgField={imgField} onEntityLoad={this.handleArtworkLoad} onEntityUpdate={this.handleArtworkUpdate} />\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { GET_POPULAR_ARTWORKS } from './../constants'\nimport ArtworkEntity from './../entity/ArtworkEntity'\nimport { IconButton } from '@material-ui/core'\nimport { MdKeyboardArrowLeft } from 'react-icons/md'\nimport { MdKeyboardArrowRight } from 'react-icons/md'\nimport './Popular.css'\n\n\nexport default class Popular extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            auto_spin: true,\n            paintings_iter: 0,\n            paintings: null\n        }\n    }\n\n    componentDidMount() {\n        this.fetchPopular()\n            .then(data => {\n                this.setState({ paintings: data });\n                setInterval(() => {\n                    if (this.state.auto_spin) {\n                        this.scroll(1, true)\n                    }\n                }, 7000)\n            })\n    }\n\n    async fetchPopular() {\n        const result = fetch(`${GET_POPULAR_ARTWORKS}`)\n        return (await result).json()\n    }\n\n    scroll(n, auto_spin) {\n        this.setState({\n            auto_spin: auto_spin,\n            paintings_iter: (() => {\n                const k = (this.state.paintings_iter + n) % this.state.paintings.length;\n                if (k >= 0) return k;\n                return this.state.paintings.length - 1;\n            })()\n        });\n    }\n\n\n\n    render() {\n        if (this.state.paintings == null) {\n            return null;\n        }\n\n        return (\n            <div className=\"Popular\">\n                <ArtworkEntity artworkId={this.state.paintings[this.state.paintings_iter].id} />\n                <div className=\"Popular-buttons\">\n                    <IconButton className=\"Popular-next\" onClick={() => this.scroll(-1, false)} >\n                        <MdKeyboardArrowLeft />\n                    </IconButton>\n                    <IconButton className=\"Popular-next\" onClick={() => this.scroll(1, false)} >\n                        <MdKeyboardArrowRight />\n                    </IconButton>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport './ArtMovementCell.css'\nimport { Link } from 'react-router-dom'\nimport { ARTIST_URL, ARTWORK_URL } from '../constants'\nimport { nameToId } from './../helper'\n\nexport default function ArtMovementCell(props) {\n    const backgroundImageStyle = {\n        backgroundImage: `url(${props.data.image})`,\n        backgroundSize: 'cover',\n        height: `100%`\n    }\n\n    return (\n        <div className=\"ArtMovementCell\">\n            <div className=\"ArtMovementCell-picture\">\n                <Link to={ARTWORK_URL + props.data.id}>\n                    <div style={backgroundImageStyle}></div>\n                </Link>\n            </div>\n\n            <div className=\"ArtMovementCell-description\">\n                <div className=\"ArtMovementCell-description-title\">\n                    {props.data.title}\n                </div>\n                    <Link to={ARTIST_URL + nameToId(props.data.artist_name)} className=\"ArtMovementCell-description-artist\" >\n                        {props.data.artist_name}\n                    </Link>\n                <div className=\"ArtMovementCell-description-year\">\n                    {props.data.year}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport { idToName } from './../helper.js'\nimport Grid from './Grid'\nimport { GET_ART_MOVEMENT_URL } from './../constants'\nimport ArtMovementCell from './ArtMovementCell.js'\n\nexport default function ArtMovementGrid() {\n    const { artMovementId } = useParams();\n    const title = <div>{idToName(artMovementId)}</div>;\n\n    return (\n        <Grid\n            url={GET_ART_MOVEMENT_URL + artMovementId}\n            titleComponent={title}\n            cellComponent={<ArtMovementCell />}\n        />\n    )\n}\n","import React from 'react';\nimport './App.css'\nimport Header from './common/Header.js'\nimport Searcher from './searching/Searcher.js'\nimport ArtistEntity from './entity/ArtistEntity';\nimport ArtworksGrid from './grid/ArtworksGrid'\nimport Popular from './popular/Popular'\n\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n} from \"react-router-dom\";\nimport ArtworkEntity from './entity/ArtworkEntity';\nimport ArtMovementGrid from './grid/ArtMovementGrid';\n\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisSearching: false,\n\t\t};\n\n\t\tthis.handleStartSearching = this.handleStartSearching.bind(this)\n\t\tthis.handleStopSearching = this.handleStopSearching.bind(this)\n\t}\n\n\thandleStartSearching() {\n\t\tthis.setState({ isSearching: true })\n\t}\n\n\thandleStopSearching() {\n\t\tthis.setState({ isSearching: false })\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t\t<Header onStartSearching={this.handleStartSearching} />\n\t\t\t\t\t</header>\n\t\t\t\t\t<main className=\"App-main\">\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/artist/:artistId/paintings/\" component={ArtworksGrid} />\n\t\t\t\t\t\t\t<Route path=\"/artist/:artistId/\" component={ArtistEntity} />\n\t\t\t\t\t\t\t<Route path=\"/paintings/:artworkId/\" component={ArtworkEntity} />\n\t\t\t\t\t\t\t<Route path=\"/art_movement/:artMovementId/\" component={ArtMovementGrid} />\n                            <Route path=\"/\" component={Popular}/>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</main>\n\t\t\t\t\t{this.state.isSearching\n\t\t\t\t\t\t? <div className=\"App-searcher\"><Searcher onStopSearching={this.handleStopSearching} /></div>\n\t\t\t\t\t\t: null}\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}