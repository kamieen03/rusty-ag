{"version":3,"sources":["common/Header.js","searching/LinkList.js","constants.js","searching/SearchResults.js","searching/Searcher.js","common/CubeSpinner.js","entity/Entity.js","entity/ArtistEntity.js","entity/GridView.js","entity/Paintings.js","entity/ArtworkEntity.js","popular/Popular.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","IconButton","onClick","onStartSearching","LinkList","undefined","data","slice","map","elem","to","url","idFieldName","onLinkClick","valueFieldName","ROOT_URL","GET_SEARCH_URL","GET_ARTIST_URL","GET_ARTWORK_URL","GET_ARTIST_ARTWORKS_URL","artistId","GET_POPULAR_ARTWORKS","SearchResults","state","results","prevProps","this","searchPhrase","fetchSearchResults","then","setState","phrase","response","fetch","json","artists","artworks","styles","Component","Searcher","handleSearchPhraseChange","bind","event","target","value","onStopSearching","type","placeholder","onChange","React","CubeSpinner","Entity","isLoaded","updateArtist","id","onEntityUpdate","fetchEntityData","receivedData","img","Image","onload","onEntityLoad","src","imgField","fields","filter","field","title","generateDescription","alt","ArtistEntity","isEntityLoaded","handleArtistLoad","handleArtistUpdate","match","params","GridView","pageIndex","pageSize","images","image","Paintings","paintings","fetchPaintings","receivedPaintings","ArtworkEntity","handleArtworkLoad","handleArtworkUpdate","artworkId","Popular","auto_spin","paintings_iter","fetchPopular","setInterval","scroll","result","n","k","length","App","isSearching","handleStartSearching","handleStopSearching","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e322936c.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\nimport { MdSearch } from 'react-icons/md';\nimport { IconButton } from '@material-ui/core';\n\nexport default function Header(props) {\n  return (\n    <div className=\"header\">\n      <div className=\"header-logo\">Artsee</div>\n      <IconButton onClick={()=> { props.onStartSearching() }}>\n        <MdSearch className=\"header-search\"/>      \n      </IconButton>\n    </div>\n  );\n}\n","import React from 'react'\nimport './LinkList.css'\nimport {Link} from \"react-router-dom\";\n\nexport default function LinkList(props) {\n\n    function generateLinks() {\n        return props.data.slice(0,8).map(elem => \n            <li className=\"LinkList-item\">\n                <Link to={props.url + \"/\" + elem[props.idFieldName]} onClick={() => props.onLinkClick()}>\n                    {elem[props.valueFieldName]}\n                </Link>\n            </li>\n        )\n    }\n\n    return (\n        <ul> {props.data !== undefined\n            ? generateLinks()\n            : null}\n        </ul>\n    )\n}\n","export const ROOT_URL = 'https://rustyag.herokuapp.com/api';\nexport const GET_SEARCH_URL = `${ROOT_URL}/search/`;\nexport const GET_ARTIST_URL = `${ROOT_URL}/artist/`;\nexport const GET_ARTWORK_URL = `${ROOT_URL}/paintings/`;\nexport const GET_ART_MOVEMENT_URL = `${ROOT_URL}/art_movement/`;\nexport const GET_ARTIST_ARTWORKS_URL = (artistId) => `${ROOT_URL}/artist/${artistId}/paintings/`;\nexport const GET_POPULAR_ARTWORKS = `${ROOT_URL}/popular/`;\n","import React, { Component } from 'react'\nimport './SearchResults.css'\nimport LinkList from './LinkList.js'\nimport {GET_SEARCH_URL} from './../constants'\n\n\nexport default class SearchResults extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            results: {}\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.searchPhrase !== prevProps.searchPhrase) {\n            if (this.props.searchPhrase === \"\") return;\n            this.fetchSearchResults(this.props.searchPhrase)\n                .then(data => {\n                    if (data != null) this.setState({ results: data })\n                });\n        }\n    }\n\n    async fetchSearchResults(phrase) {\n        const response = fetch(`${GET_SEARCH_URL}${phrase}`)\n        if (phrase === this.props.searchPhrase)\n            return (await response).json()\n        return null\n    }\n\n    render() {\n        if (this.props.searchPhrase === \"\") {\n            return null;\n        }\n\n        return (\n            <div className=\"SearchResults\">\n                <div className=\"SearchResults-list\">\n                    <h1>Artists</h1>\n                    <LinkList onLinkClick={this.props.onLinkClick} data={this.state.results.artists} idFieldName=\"url\" valueFieldName=\"name\" url=\"/artist\" />\n                </div>\n                <div className=\"SearchResults-list\">\n                    <h1>Paintings</h1>\n                    <LinkList onLinkClick={this.props.onLinkClick} data={this.state.results.artworks} idFieldName=\"id\" valueFieldName=\"name\" url=\"/paintings\" />\n                </div>\n                <div className=\"SearchResults-list\">\n                    <h1>Styles</h1>\n                    <LinkList onLinkClick={this.props.onLinkClick} data={this.state.results.styles} idFieldName=\"url\" valueFieldName=\"title\" url=\"/art_movement\" />\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './Searcher.css'\nimport SearchResults from './SearchResults'\nimport { MdClose } from 'react-icons/md';\nimport { IconButton } from '@material-ui/core';\n\nexport default class Searcher extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tphrase: \"\",\n\t\t};\n\n\t\tthis.handleSearchPhraseChange = this.handleSearchPhraseChange.bind(this);\n\t}\n\n\n\thandleSearchPhraseChange(event) {\n\t\tthis.setState({phrase: event.target.value});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Searcher\">\n                <div className=\"SearcherInsides\">\n                    <IconButton onClick={this.props.onStopSearching} className=\"Searcher-close\">\n                        <MdClose className=\"Searcher-close-icon\"/>\n                    </IconButton>\n                    <input className=\"Searcher-searchbar\"type=\"search\" placeholder=\"Search\" onChange={this.handleSearchPhraseChange}/>\n                    <SearchResults searchPhrase={this.state.phrase} onLinkClick={this.props.onStopSearching}/>\n                </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react'\nimport './CubeSpinner.css'\n\nexport default function CubeSpinner() {\n    return (\n        <div className=\"CubeSpinner\">\n            <div className=\"CubeSpinner-cube1\"></div>\n            <div className=\"CubeSpinner-cube2\"></div>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport CubeSpinner from './../common/CubeSpinner.js'\nimport './Entity.css'\n\nexport default class Entity extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            data: null,\n        };\n    }\n\n\n    componentDidMount() {\n        this.updateArtist();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.id !== prevProps.id) {\n            this.props.onEntityUpdate();\n            this.setState({\n                isLoaded: false,\n                data: null,\n            });\n\n            this.updateArtist();\n        }\n    }\n\n\n    async updateArtist() {\n        const receivedData = await this.fetchEntityData();\n        const img = new Image();\n\n        img.onload = () => {\n            this.setState({\n                isLoaded: true,\n                data: receivedData,\n            });\n            this.props.onEntityLoad();\n        };\n\n        img.src = receivedData[this.props.imgField];\n    }\n\n    async fetchEntityData() {\n        const response = await fetch(`${this.props.url}${this.props.id}`);\n        const data = await response.json()\n        return data\n    }\n\n    generateDescription() {\n        return this.props.fields\n            .filter(field => this.state.data[field[0]] != null)\n            .map(field =>\n                <div className=\"Entity-description-item\">\n                    <div className=\"Entity-description-item-property\">\n                        {field[1] + \":\"}\n                    </div>\n                    <div className=\"Entity-description-item-value\">\n                        {this.state.data[field[0]]}\n                    </div>\n                </div>\n            );\n    }\n\n\n    render() {\n        if (this.state.isLoaded) {\n            return (\n                <div className=\"Entity\">\n                    <div className=\"Entity-description\">\n                        <h1 className=\"Entity-description-title\">{this.state.data[this.props.title]}</h1>\n                        {this.generateDescription()}\n                    </div>\n                    <img className=\"Entity-image\" src={this.state.data[this.props.imgField]} alt=\"\" />\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <CubeSpinner />\n                </div>\n            )\n        }\n    }\n}\n","import React, { Component } from 'react'\nimport Entity from './Entity.js'\nimport { GET_ARTIST_URL } from './../constants'\nimport { Link } from 'react-router-dom'\nimport './ArtistEntity.css'\n\n\nexport default class ArtistEntity extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { isEntityLoaded: false }\n        this.handleArtistLoad = this.handleArtistLoad.bind(this);\n        this.handleArtistUpdate = this.handleArtistUpdate.bind(this);\n    }\n\n    handleArtistLoad() {\n        this.setState({ isEntityLoaded: true })\n    }\n\n    handleArtistUpdate() {\n        this.setState({ isEntityLoaded: false })\n    }\n\n    render() {\n        const { artistId } = this.props.match.params\n        const name = \"name\";\n        const fields = [[\"birth\", \"Born\"], [\"death\", \"Died\"]];\n        const imgField= \"image_url\";\n\n        return (\n            <div className=\"Artist\">\n                <Entity id={artistId} url={GET_ARTIST_URL} title={name} fields={fields} imgField={imgField} onEntityLoad={this.handleArtistLoad} onEntityUpdate={this.handleArtistUpdate} />\n                {this.state.isEntityLoaded\n                    ? <Link className=\"Artist-artworks\" to={`/artist/${artistId}/paintings/`}>See artworks</Link>\n                    : null }\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport './GridView.css'\n\nexport default class GridView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pageIndex: 1,\n        }\n    }\n\n    render() {\n        const from = (this.state.pageIndex - 1) * this.pageSize;\n        const to = this.state.pageIndex * this.pageSize;\n\n        return (\n            <div>\n                {this.props.images.slice(0,20).map(image =>\n                    <LazyLoadImage src={image.image} className=\"\" />\n                )}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { GET_ARTIST_ARTWORKS_URL } from './../constants'\nimport './Paintings.css'\nimport './../common/CubeSpinner'\nimport CubeSpinner from './../common/CubeSpinner';\nimport GridView from './GridView'\n\nexport default class Paintings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            paintings: null\n        }\n    }\n\n    componentDidMount() {\n        this.fetchPaintings()\n            .then(receivedPaintings =>\n                this.setState({\n                    isLoaded: true,\n                    paintings: receivedPaintings\n                })\n            )\n    }\n\n    async fetchPaintings() {\n        const { artistId } = this.props.match.params\n        const response = await fetch(`${GET_ARTIST_ARTWORKS_URL(artistId)}`);\n        const data = await response.json()\n        return data\n    }\n\n    handleLoaded() {\n\n    }\n\n    handleStartLoading() {\n        this.setState({isLoaded: false});\n    }\n\n\n    render() {\n\n        if (this.state.isLoaded) {\n            return (\n                <div>\n                    <GridView images={this.state.paintings} pageSize={10}/>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <CubeSpinner />\n                </div>\n            )\n        }\n\n    }\n}\n","import React, { Component } from 'react'\nimport Entity from './Entity.js'\nimport { GET_ARTWORK_URL } from './../constants'\nimport './ArtworkEntity.css'\n\n\nexport default class ArtworkEntity extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { isEntityLoaded: false }\n        this.handleArtworkLoad = this.handleArtworkLoad.bind(this);\n        this.handleArtworkUpdate = this.handleArtworkUpdate.bind(this);\n    }\n\n    handleArtworkLoad() {\n        this.setState({ isEntityLoaded: true })\n    }\n\n    handleArtworkUpdate() {\n        this.setState({ isEntityLoaded: false })\n    }\n\n    render() {\n        var artworkId;\n        if ('match' in this.props) {\n            artworkId = this.props.match.params\n        } else {\n            artworkId = this.props.artworkId\n        }\n\n        const title = \"title\";\n        const fields = [\n            [\"artist_name\", \"Artist\"], \n            [\"completition_year\", \"Completition year\"], \n            [\"location\", \"Location\"],\n            [\"gallery\", \"Gallery\"],\n            [\"size_x\", \"Width\"],\n            [\"size_y\", \"Height\"]\n        ];\n        \n        const imgField = \"image\";\n\n        return (\n            <div className=\"Artwork\">\n                <Entity id={artworkId} url={GET_ARTWORK_URL} title={title} fields={fields} imgField={imgField} onEntityLoad={this.handleArtworkLoad} onEntityUpdate={this.handleArtworkUpdate} />\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { GET_POPULAR_ARTWORKS } from './../constants'\nimport ArtworkEntity from './../entity/ArtworkEntity';\nimport { IconButton } from '@material-ui/core';\nimport { MdKeyboardArrowLeft } from 'react-icons/md';\nimport { MdKeyboardArrowRight } from 'react-icons/md';\nimport './Popular.css'\n\n\nexport default class Popular extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            auto_spin: true,\n            paintings_iter: 0,\n            paintings: null\n        }\n    }\n    \n    componentDidMount() {\n        this.fetchPopular()\n            .then(data => {\n                this.setState({ paintings: data });\n                setInterval(() => {\n                    if (this.state.auto_spin) {\n                        this.scroll(1, true)\n                    }}, 7000)\n            })\n    }\n\n    async fetchPopular() {\n        const result = fetch(`${GET_POPULAR_ARTWORKS}`)\n        return (await result).json()\n    }\n\n    scroll(n, auto_spin) {\n        this.setState({ auto_spin: auto_spin,\n                        paintings_iter: (()=>{\n                            const k = (this.state.paintings_iter+n) % this.state.paintings.length;\n                            if (k >= 0) return k;\n                            return this.state.paintings.length-1;\n                        })()\n        });\n    }\n\n\n\n    render() {\n        if (this.state.paintings != null) {\n            return (\n                <div className=\"Carousel\">\n                    <IconButton onClick={() => this.scroll(-1, false)} >\n                        <MdKeyboardArrowLeft />\n                    </IconButton>\n                        <ArtworkEntity artworkId={this.state.paintings[this.state.paintings_iter].id }/>\n                    <IconButton onClick={() => this.scroll(1, false)} >\n                        <MdKeyboardArrowRight/>\n                    </IconButton>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"Carousel\">\n                </div>\n            )\n        }\n    }\n}\n","import React from 'react';\nimport './App.css'\nimport Header from './common/Header.js'\nimport Searcher from './searching/Searcher.js'\nimport ArtistEntity from './entity/ArtistEntity';\nimport Paintings from './entity/Paintings'\nimport Popular from './popular/Popular'\n\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n} from \"react-router-dom\";\nimport ArtworkEntity from './entity/ArtworkEntity';\n\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisSearching: false,\n\t\t};\n\n\t\tthis.handleStartSearching = this.handleStartSearching.bind(this)\n\t\tthis.handleStopSearching = this.handleStopSearching.bind(this)\n\t}\n\n\thandleStartSearching() {\n\t\tthis.setState({ isSearching: true })\n\t}\n\n\thandleStopSearching() {\n\t\tthis.setState({ isSearching: false })\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t\t<Header onStartSearching={this.handleStartSearching} />\n\t\t\t\t\t</header>\n\t\t\t\t\t<main className=\"App-main\">\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/artist/:artistId/paintings/\" component={Paintings} />\n\t\t\t\t\t\t\t<Route path=\"/artist/:artistId/\" component={ArtistEntity} />\n\t\t\t\t\t\t\t<Route path=\"/paintings/:artworkId/\" component={ArtworkEntity} />\n                            <Route path=\"/\" component={Popular}/>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</main>\n\t\t\t\t\t{this.state.isSearching\n\t\t\t\t\t\t? <div className=\"App-searcher\"><Searcher onStopSearching={this.handleStopSearching} /></div>\n\t\t\t\t\t\t: null}\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}